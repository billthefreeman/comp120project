== README
1. live URL: https://comp120team8reporter.herokuapp.com/
    heroku git: https://git.heroku.com/comp120team8reporter.git

2. We chose to use Rspec as test framework. 
Compared with other test methods (e.g. unit test), it is more descriptive and more English-like. The writing of the tests is more intuitive as well as the output from running the tests. We did model tests, controller tests and view tests.

3. How to run the test:
Our test files are in the folder 'spec', to run the test, type 'rspec' in the command line.
You will see the following test results shown on you screen:

..........................................................
64 examples, 0 failures

That means our mvp passes all the 64 test. If you want more information, type 'rspec --format documentation', then more details about the test results will be shown on the screen.

4. scale the application:
Currently, we are using Heroku free dyno for deployment. The free tier only has 512 MB RAM and the database storage is trivial.
The hardware will have difficulties handling 15,000 unique visits per day. For example, assuming there are on-peak and off-peak time of visiting.
For peak hours, there could be 6000 visits per hour or 100 visits per second. Then the scalability should be taken into consideration to deal
with the concurrency issue.

However, first we need to optimize the use of existing resources, e.g. making fewer HTTP requests for each visit, tuning the database, etc.

For scalability, we can either scale horizontally (scale out, use more dynos) or scale vertically(scale up, use bigger dynos).
It's simple to do both with Heroku. We can also adopt a hybrid way according to the operation of the application.


